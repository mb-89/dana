import configparser
import importlib
import os
import os.path as op
from contextlib import redirect_stdout

from pipreqs.pipreqs import __doc__, __version__, docopt, init


def main():
    build_requirements()
    build_metadata()
    build_readme()


def build_readme():
    cfg = configparser.ConfigParser()
    cfg.read("setup.cfg")
    cli = importlib.import_module(".cli", f'src.{cfg["metadata"]["name"]}')
    with open(op.join(op.dirname(__file__), "README"), "w") as f:
        f.write(cfg["metadata"]["name"] + "\n\n")
        with redirect_stdout(f):
            cli.main(["-h"])


def build_metadata():
    cfg = configparser.ConfigParser()
    cfg.read("setup.cfg")
    lines = ["# this file is autogenerated by .pre-commit.py"]
    lines.append('"""')
    lines.append(cfg["metadata"]["description"])
    lines.append('"""')
    lines.append('__version__ = "' + cfg["metadata"]["version"] + '"')
    lines.append('__projname__ = "' + cfg["metadata"]["name"] + '"')
    lines.append("")
    open(f'src/{cfg["metadata"]["name"]}/__metadata__.py', "w").write("\n".join(lines))


def build_requirements():
    cfg = configparser.ConfigParser()
    cfg.read("setup.cfg")
    wd = op.dirname(__file__)
    dst = op.join(wd, "requirements.txt")
    finaldst = f'src/{cfg["metadata"]["name"]}/requirements.txt'
    try:
        os.remove(dst)
        os.remove(finaldst)
    except FileNotFoundError:
        pass

    # this is a copy of the pipreqs main fcn, but we pass our own argv to docopt
    args = docopt(__doc__, argv=[f'src/{cfg["metadata"]["name"]}'], version=__version__)
    init(args)
    os.rename(finaldst, "requirements.txt")
    unsorted = open(dst, "r").readlines()
    sortedlst = ["# this file is autogenerated by .pre-commit.py\n"] + sorted(unsorted)
    sortedlst = [x.replace("==", ">=") for x in sortedlst]
    open(dst, "w").write("".join(sortedlst))


if __name__ == "__main__":
    main()
